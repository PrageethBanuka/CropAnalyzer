public class LinkedList<T> //  type parameter T
{
    private Node<T> head; 

    // Add a new node to the end of the list
    public void Add(T data)
    {
        Node<T> newNode = new Node<T>(data);

        if (head == null)
        {
            head = newNode; // If list is empty, set head to new node
        }
        else
        {
            Node<T> current = head;
            while (current.Next != null) // Traverse to the last node
            {
                current = current.Next;
            }
            current.Next = newNode; // Link the last node to the new node
        }
        Console.WriteLine($"Added: {data}");
    }

    // Delete the first node with the specified data
    public void Delete(T data)
    {
        if (head == null)
        {
            Console.WriteLine("List is empty.");
            return;
        }

        // Check if the head node needs to be removed
        if (head.Data.Equals(data))
        {
            head = head.Next; // Move the head to the next node
            Console.WriteLine($"Deleted: {data}");
            return;
        }

        // Traverse the list to find the node to delete
        Node<T> current = head;
        while (current.Next != null && !current.Next.Data.Equals(data))
        {
            current = current.Next;
        }

        if (current.Next == null)
        {
            Console.WriteLine($"Element '{data}' not found.");
        }
        else
        {
            current.Next = current.Next.Next; // Remove the node
            Console.WriteLine($"Deleted: {data}");
        }
    }

    // Display all nodes in the list
    public void Display()
    {
        if (head == null)
        {
            Console.WriteLine("The list is empty.");
            return;
        }

        Node<T> current = head;
        while (current != null)
        {
            Console.Write(current.Data + " ");
            current = current.Next;
        }
        Console.WriteLine();
    }
}

// Generic Node class
public class Node<T>
{
    public T Data { get; set; } // Data of type T
    public Node<T> Next { get; set; } // Reference to the next node

    public Node(T data)
    {
        Data = data;
        Next = null;
    }
}
/*
class Program
{
    static void Main(string[] args)
    {
        // LinkedList of integers
        LinkedList<int> intList = new LinkedList<int>();
        intList.Add(10);
        intList.Add(20);
        intList.Add(30);
        intList.Display();
        intList.Delete(20);
        intList.Display();

        // LinkedList of strings
        LinkedList<string> stringList = new LinkedList<string>();
        stringList.Add("Apple");
        stringList.Add("Banana");
        stringList.Add("Cherry");
        stringList.Display();
        stringList.Delete("Banana");
        stringList.Display();
    }
}
*/
